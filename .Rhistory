print(x4)
summray(x4)
summary(x4)
biplot(x4, scale = 0, cex = 6)
biplot(x4, scale = 0)
View(x4)
View(x3)
x4$sdev
screeplot(x4)
x5 <- x4$sdev)^2/ sum(x4$sdev^2)
x5 <- (x4$sdev)^2/ sum(x4$sdev^2)
x6 <- x5(1:5,)
x5 <- as.data.frame(x5)
View(x5)
x6 <- x5(1:5,)
x6 <- x5[1:5,]
sum(x6)
xols<-x4$x[1:300,1:5]
fit <- lm(y ~ xols)
summary(fit)
testdata = predict(fit, x.test)
mean((testdata-y.test)^2)
testdata2 = predict(fit, x.test)
testdata2 = predict(fit, x.test)
testdata2 = predict(fit, x.test)
mean((testdata2- y.test)^2)
testdata2 = predict(fit, y.test)
mean((testdata2- y.test)^2)
View(xols)
xols$y <- y
fit <- lm(y ~., xols)
View(xols)
ols <- as.data.frame(xols)
xols <- as.data.frame(xols)
View(xols)
y
xols<-x4$x[1:300,1:5]
fit <- lm(y~xols)
fit <- lm(y~xols)
summary(fit)
testdata2 = predict(fit, x.test)
x.test <- as.data.frame(x.test)
testdata2 = predict(fit, x.test)
testdata2 = predict(fit, y.test)
y.test <- as.data.frame(y.test)
testdata2 = predict(fit, y.test)
yhat0 = predict(fit, y.test)
ols<-x4$x[,1:5]
fit <- lm(y~xols)
summary(fit)
y.test <- as.data.frame(y.test)
yhat0 = predict(fit, y.test)
xols<-x4$x[,1:5]
fit <- lm(y~xols)
xols<-x4$x[1:300,1:5]
fit <- lm(y~xols)
summary(fit)
fit<-lm(y~.,x)
yhat = predict(fit, newdata=x.test)
mean((yhat-y.test)^2
)
t8 <- read.csv('Train_Final2.csv')
t9 <- t8
directory <- "/Users/emily.webber/Documents/Python Scripts/Mol"
setwd(directory)
library(data.table)
#library(xgboost)
t8 <- read.csv('Train_Final2.csv')
t9 <- t8
directory <- "/Users/emily.webber/Documents/Python Scripts/Mol"
setwd(directory)
t8 <- read.csv('Train_Final2.csv')
t9 <- t8
install.packages("DBI")
library(DBI)
datarobot::ConnectToDataRobot
directory <- "/Users/emily.webber/Documents/R/Prisons/"
setwd(directory)
library(data.table)
df <- read.csv('prisons.csv')
Crime <- setDT(df)[, lapply(.SD, length), by=.(Most.Serious.Crime),
.SDcols=c("Admission.Type")]
Crime2 <- Crime[order(-Admission.Type),]
Gen <- setDT(df)[, lapply(.SD, length), by=.(c(Most.Serious.Crime, Gender)),
.SDcols=c("Admission.Type")]
View(Crime2)
View(df)
Gen <- setDT(df)[, lapply(.SD, length), by=.(c('Most.Serious.Crime', 'Gender')),
.SDcols=c("Admission.Type")]
Gen <- setDT(df)[, lapply(.SD, length), by= .('Most.Serious.Crime', 'Gender'),
.SDcols=c("Admission.Type")]
Gen <- setDT(df)[, lapply(.SD, length), by= .('Gender'),
.SDcols=c("Admission.Type")]
str(df)
Gen <- setDT(df)[, lapply(.SD, length), by= .(Gender),
.SDcols=c("Admission.Type")]
View(df)
View(Gen)
Gen2 <- setDT(df)[, lapply(.SD, length), by= .(Gender, Most.Serious.Crime),
.SDcols=c("Admission.Type")]
View(Gen2)
directory <- "/Users/emily.webber/Documents/R/Bio"
setwd(directory)
library(data.table)
library(stringr) #assist with text manipulation
library(dplyr) # data manipulation
SSC <-read.csv("77_cancer_proteomes_CPTAC_itraq.csv")
dim(SSC)
clin <-read.csv("clinical_data_breast_cancer.csv")
dim(clin)
p1<-str_replace(SSC$`Complete TCGA ID`,"TCGA","")
p2<-str_replace(p1,".\\d+$","")
p3<-str_replace(p2,"^","TCGA-")
for (i in seq(1:83)){
SSC$`Complete TCGA ID`[i]<-p3[i]
}
colnames(clin)
clinp<-clin[,c(1,21)]
MASTER<- inner_join(SSC,clinp)
View(clin)
View(clinp)
View(clin)
directory <- "/Users/emily.webber/Documents/R/Bio2/"
setwd(directory)
library(data.table)
D <- read.csv('clinvar_conflicting.csv')
View(D)
library(dplyr)
library(data.table)
library(knitr)
library(ggplot2)
directory <- "/Users/emily.webber/Dropbox/Website Dropbox 2/MMA"
setwd(directory)
devtools::install_github("dkahle/ggmap")
library(ggmap)
register_google(key = "APIKEY")
#Fight data
D <- read.csv("Fights2.csv")
#Win Categories:  I didn't like the way the categories were listed in the data, so I made an excel csv sheet that contains the original descriptions and added new categoreis that cleaned up the data. This is merged with fight data using "merge" to make analysis easier.
C <- read.csv("Cat.csv")
D <- merge(D, C, by = "method_d", all = TRUE)
D <- setDT(D)
#Win/Loss Ratio**************
W <- select(D, f1fid, f1result)
Wb <- filter(W, f1result == "win")
W2 <- setDT(Wb)[, lapply(.SD, length), by = .(f1fid), .SDcols = c("f1result")]
colnames(W2)[colnames(W2)=="f1fid"] <- "Fight_ID"
colnames(W2)[colnames(W2)=="f1result"] <- "Wins"
L <- select(D, f2fid, f2result)
Lb <- filter(L, f2result == "loss")
L2 <- setDT(Lb)[, lapply(.SD, length), by = .(f2fid), .SDcols = c("f2result")]
colnames(L2)[colnames(L2)=="f2fid"] <- "Fight_ID"
colnames(L2)[colnames(L2)=="f2result"] <- "Loss"
DW1 <- select(D, f1fid, f1result)
DWb1 <- filter(DW1, f1result == "draw")
DW21 <- setDT(DWb1)[, lapply(.SD, length), by = .(f1fid), .SDcols = c("f1result")]
colnames(DW21)[colnames(DW21)=="f1fid"] <- "Fight_ID"
colnames(DW21)[colnames(DW21)=="f1result"] <- "Draw"
DW <- select(D, f2fid, f2result)
DWb <- filter(DW, f2result == "draw")
DW2 <- setDT(DWb)[, lapply(.SD, length), by = .(f2fid), .SDcols = c("f2result")]
colnames(DW2)[colnames(DW2)=="f2fid"] <- "Fight_ID"
colnames(DW2)[colnames(DW2)=="f2result"] <- "Draw"
DW3 <- rbind(DW2, DW21)
DW4 <- setDT(DW3)[, lapply(.SD, length), by = .(Fight_ID), .SDcols = c("Draw")]
RC <- merge(W2, L2, by = "Fight_ID", all = TRUE)
RC2 <- merge(RC, DW4, by = "Fight_ID", all = TRUE)
RC2[is.na(RC2)] <- 0
#Fighters*********
FR <- read.csv("Fighters.csv")
FR2 <- select(FR, fid, name,	Gender, nick,	birth_date,	height,	weight,	association,	class,	locality,	country)
colnames(FR2)[colnames(FR2)=="name"] <- "Name"
colnames(FR2)[colnames(FR2)=="fid"] <- "Fight_ID"
FR3 <- merge(RC2, FR2, by = "Fight_ID", all = TRUE)
colnames(FR3)[colnames(FR3)=="Name.x"] <- "Name"
FR3$Record <- (FR3$Wins)/(FR3$Loss)
FR3$Record <- round(FR3$Record, digits = 2)
FR3$Undefeated[FR3$Loss == 0] <- "Undefeated"
FR3$Undefeated[FR3$Loss >= 1] <- "Defeated"
FR3U <- filter(FR3, Loss == 0)
FR3D <- filter(FR3, Loss >= 1)
FR3U$Record <- FR3U$Wins
FR3C <- rbind(FR3U, FR3D)
FR3 <- FR3C
FR3 <- FR3[!duplicated(FR3), ]
####RING RUST
TB_F1 <- select(D, f1fid, f1result, event_date)
TB_F1$event_date <- as.character(TB_F1$event_date)
TB_F1$event_date <- as.Date(TB_F1$event_date, format = "%m/%d/%Y")
TB_F1$event_date <- as.POSIXct.Date(TB_F1$event_date,format="%d-%m-%Y")
colnames(TB_F1)[colnames(TB_F1)=="f1fid"] <- "Fight_ID"
colnames(TB_F1)[colnames(TB_F1)=="f1result"] <- "Result"
TB_F2 <- select(D, f2fid, f2result, event_date)
TB_F2$event_date <- as.character(TB_F2$event_date)
TB_F2$event_date <- as.Date(TB_F2$event_date, format = "%m/%d/%Y")
TB_F2$event_date <- as.POSIXct.Date(TB_F2$event_date,format="%d-%m-%Y")
colnames(TB_F2)[colnames(TB_F2)=="f2fid"] <- "Fight_ID"
colnames(TB_F2)[colnames(TB_F2)=="f2result"] <- "Result"
TB_F3 <- rbind(TB_F1, TB_F2)
TB_F3b <-  TB_F3[ order(TB_F3[,1], -TB_F3[,3]),]
TB_F3b <- as.data.table(TB_F3b)
setkey(TB_F3b,Fight_ID)
x <- TB_F3b[,lapply(.SD,function(x) head(x,2)),by = key(TB_F3b)]
xmax <- setDT(x)[,.SD[which.max(event_date)],keyby=Fight_ID]
colnames(xmax)[colnames(xmax)=="event_date"] <- "EMax"
xmin <- setDT(x)[,.SD[which.min(event_date)],keyby=Fight_ID]
colnames(xmin)[colnames(xmin)=="event_date"] <- "EMin"
xmaxmin <- merge(xmax, xmin, by = "Fight_ID")
#xmaxmin$Result.x <- NULL
#xmaxmin$Result.y <- NULL
xmaxmin$EMax <- as.POSIXct(unlist(xmaxmin$EMax), format = "%m/%d/%Y")
xmaxmin$EMin <- as.POSIXct(unlist(xmaxmin$EMin), format = "%m/%d/%Y")
xmaxmin$Diff <- difftime(xmaxmin$EMax, xmaxmin$EMin, units = c("days"))
ydiff <- setDT(xmaxmin)[, lapply(.SD, mean), by = .(Result.x), .SDcols = c("Diff")]
ydiff$Diff <- round(ydiff$Diff, digits = 1)
#write.csv(xmaxmin, file = "ringrust.csv")
std <- function(x) sd(x)/sqrt(length(x))
ydiffse <- setDT(xmaxmin)[, lapply(.SD, std), by = .(Result.x), .SDcols = c("Diff")]
ydiffse$Diff <- round(ydiffse$Diff, digits = 1)
#Age of fighters********************************
Win <- select(D, f1fid, f1result, event_date)
Loss <- select(D, f2fid, f2result, event_date)
Age <- select(FR3, Fight_ID, birth_date)
colnames(Win)[colnames(Win)=="f1fid"] <- "Fight_ID"
colnames(Loss)[colnames(Loss)=="f2fid"] <- "Fight_ID"
colnames(Win)[colnames(Win)=="f1result"] <- "Result"
colnames(Loss)[colnames(Loss)=="f2result"] <- "Result"
Win <- as.data.frame(Win)
Loss <- as.data.frame(Loss)
WLA <- rbind(Win, Loss)
WLA2 <- merge(WLA, Age, by = "Fight_ID")
WLA2$birth_date <- as.POSIXct(unlist(WLA2$birth_date), format = "%m/%d/%Y")
WLA2$event_date <- as.POSIXct(unlist(WLA2$event_date), format = "%m/%d/%Y")
WLA2$Age <- difftime(WLA2$event_date, WLA2$birth_date, units = c("days"))
WLA2$Age <- WLA2$Age / 365
WLA2$Age <- round(WLA2$Age, digits = 1)
#Fights per year********************
#Locations of Fighters****************
#Record
Place <- setDT(FR3)[, lapply(.SD, sum), by = .(association), .SDcols = c("Wins", "Loss", "Draw")]
Place <- filter(Place, association != "")
Place2 <- Place[order(-Place$Wins),]
Place3 <- Place2[1:10,]
FR3$Loc <- paste(FR3$locality, FR3$country, sep = ", ")
Location <- setDT(FR3)[, lapply(.SD, sum), by = .(Loc), .SDcols = c("Wins", "Loss", "Draw")]
Location2 <- Location[order(-Location$Wins),]
Location3 <- Location2[1:10,]
W <- setDT(D)[, lapply(.SD, length), by = .(Category, round), .SDcols = c("f1result")]
W <- filter(W, !is.na(Category))
W$round <- factor(W$round, levels =c("5", "4", "3", "2", "1"))
W <- filter(W, Category != "Decision")
#W$Category <- factor(W$Category,
#    levels =c("DQ", "Injury", "MISC", "Stoppage",
#             "JointLock", "Choke", "Strike", "Decision"))
ggplot(data=W, aes(x = reorder(Category, f1result), y=f1result, fill = round)) +
geom_bar(stat="identity", color = "black") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Method of Win")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
View(W)
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity", color = "black") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Method of Win")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
View(W)
ggplot(data=W, aes(x = reorder(round), y=f1result)) +
geom_bar(stat="identity", color = "blue") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity", color = "blue") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result, fill = "blue")) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result, fill = "blue")) +
geom_bar(stat="identity") +
#scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result, fill = "round")) +
geom_bar(stat="identity") +
#scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result, fill = "round")) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result) +
geom_bar(stat="identity") +
scale_fill_manual(values = c("black", "brown", "purple", "blue", "white")) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result) +
geom_bar(stat="identity") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result) +
geom_bar(stat="identity") +
scale_fill_manual(values = blue) +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result) +
geom_bar(stat="identity") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result) +
geom_bar(stat="identity") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
)
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result, fill = "blue")) +
geom_bar(stat="identity") +
# scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity", colour = "blue") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity", fill = "blue") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Win Type") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity", fill = "blue") +
scale_fill_manual(values = "blue") +
ggtitle("Rounds")+
labs(y = "Count", x = "Rounds") +
coord_flip() +
theme(axis.text=element_text(size=14))
ggplot(data=W, aes(x = reorder(round, f1result), y=f1result)) +
geom_bar(stat="identity", fill = "blue") +
scale_fill_manual(values = "blue") +
ggtitle("Win by Round")+
labs(y = "Count", x = "Rounds") +
coord_flip() +
theme(axis.text=element_text(size=14))
Country <- setDT(FR3)[, lapply(.SD, sum), by = .(country), .SDcols = c("Wins", "Loss", "Draw")]
Country2 <- Country[order(-Country$Wins),]
Country3 <- Country2[1:10,]
colnames(Country3)[colnames(Country3)=="country"] <- "Country"
kable(Country3)
View(Country)
View(FR3)
View(Country)
View(Country2)
View(Country3)
View(Country2)
View(Country2)
View(Country3)
View(C)
View(Country)
View(FR3)
CountryR <- setDT(FR3)[, lapply(.SD, sum), by = .(country), .SDcols = c("Wins", "Loss", "Draw")]
CountryR$Win_Loss_Ratio <- CountryR$Wins/Country$Loss
CountryR2 <- CountryR[order(-CountryR$Win_Loss_Ratio),]
CountryR3 <- CountryR2[1:10,]
colnames(CountryR3)[colnames(CountryR3)=="country"] <- "Country"
kable(CountryR3)
CountryR$Total <- CountryR$Wins + CountryR$Loss + CountryR$Draw
CountryR2 <- filter(CountryR2, TOtal >= 10)
CountryR2 <- filter(CountryR2, Total >= 10)
CountryR2 <- filter(CountryR2, CountryR2$Total >= 10)
CountryR <- setDT(FR3)[, lapply(.SD, sum), by = .(country), .SDcols = c("Wins", "Loss", "Draw")]
CountryR$Win_Loss_Ratio <- CountryR$Wins/Country$Loss
CountryR$Total <- CountryR$Wins + CountryR$Loss + CountryR$Draw
CountryR2 <- subset(studentdata,  Total >= 10)
CountryR2 <- subset(CountryR,  Total >= 10)
CountryR2 <- subset(CountryR,  Total >= 5)
CountryR2 <- CountryR[order(-CountryR$Win_Loss_Ratio),]
CountryR2$Win_Loss_Ratio[CountryR2$Wins > 0 and  ]
CountryR2 <- subset(CountryR,  Total >= 10)
CountryR2 <- CountryR[order(-CountryR$Win_Loss_Ratio),]
CountryR2$Win_Loss_Ratio[CountryR2$Wins > 0 and  ]
CountryR3 <- CountryR2[1:10,]
colnames(CountryR3)[colnames(CountryR3)=="country"] <- "Country"
kable(CountryR3)
CountryR2 <- subset(CountryR,  Total >= 10)
CountryR2 <- CountryR2[order(-CountryR2$Win_Loss_Ratio),]
CountryR2$Win_Loss_Ratio[CountryR2$Wins > 0 and  ]
CountryR3 <- CountryR2[1:10,]
colnames(CountryR3)[colnames(CountryR3)=="country"] <- "Country"
kable(CountryR3)
View(Location3)
View(Location2)
View(Location)
LocationR <- setDT(FR3)[, lapply(.SD, sum), by = .(location), .SDcols = c("Wins", "Loss", "Draw")]
LocationR <- setDT(FR3)[, lapply(.SD, sum), by = .(Loc), .SDcols = c("Wins", "Loss", "Draw")]
LocationR$Win_Loss_Ratio <- LocationR$Wins/LocationR$Loss
View(LocationR)
LocationR <- setDT(FR3)[, lapply(.SD, sum), by = .(Loc), .SDcols = c("Wins", "Loss", "Draw")]
LocationR$Win_Loss_Ratio <- LocationR$Wins/LocationR$Loss
LocationR$Total <- LocationR$Wins + LocationR$Loss + LocationR$Draw
LocationR2 <- subset(LocationR,  Total >= 5)
LocationR2 <- LocationR[order(-LocationR$Wins),]
LocationR3 <- LocationR2[1:10,]
colnames(LocationR3)[colnames(LocationR3)=="country"] <- "Country"
kable(LocationR3)
LocationR2 <- LocationR[order(-LocationR$Win_Loss_Ratio),]
LocationR3 <- LocationR2[1:10,]
colnames(LocationR3)[colnames(LocationR3)=="country"] <- "Country"
kable(LocationR3)
LocationR <- setDT(FR3)[, lapply(.SD, sum), by = .(Loc), .SDcols = c("Wins", "Loss", "Draw")]
LocationR$Win_Loss_Ratio <- LocationR$Wins/LocationR$Loss
LocationR$Total <- LocationR$Wins + LocationR$Loss + LocationR$Draw
LocationR2 <- subset(LocationR,  Total >= 5)
LocationR2 <- LocationR[order(-LocationR2$Win_Loss_Ratio),]
LocationR3 <- LocationR2[1:10,]
colnames(LocationR3)[colnames(LocationR3)=="country"] <- "Country"
kable(LocationR3)
LocationR <- setDT(FR3)[, lapply(.SD, sum), by = .(Loc), .SDcols = c("Wins", "Loss", "Draw")]
LocationR$Win_Loss_Ratio <- LocationR$Wins/LocationR$Loss
LocationR$Total <- LocationR$Wins + LocationR$Loss + LocationR$Draw
LocationR2 <- subset(LocationR,  Total >= 5)
LocationR2 <- LocationR2[order(-LocationR2$Win_Loss_Ratio),]
LocationR3 <- LocationR2[1:10,]
colnames(LocationR3)[colnames(LocationR3)=="country"] <- "Country"
kable(LocationR3)
LocationR2 <- subset(LocationR,  Total >= 5)
View(LocationR)
View(LocationR2)
LocationR2 <- LocationR2[order(-LocationR2$Win_Loss_Ratio),]
View(LocationR2)
LocationR2 <- subset(LocationR,  Total >= 10)
LocationR2 <- LocationR2[order(-LocationR2$Win_Loss_Ratio),]
LocationR3 <- LocationR2[1:10,]
colnames(LocationR3)[colnames(LocationR3)=="country"] <- "Country"
kable(LocationR3)
LocationR <- setDT(FR3)[, lapply(.SD, sum), by = .(Loc), .SDcols = c("Wins", "Loss", "Draw")]
LocationR$Win_Loss_Ratio <- LocationR$Wins/LocationR$Loss
LocationR$Total <- LocationR$Wins + LocationR$Loss + LocationR$Draw
LocationR2 <- subset(LocationR,  Total >= 10)
LocationR2 <- LocationR2[order(-LocationR2$Win_Loss_Ratio),]
LocationR3 <- LocationR2[1:10,]
colnames(LocationR3)[colnames(LocationR3)=="country"] <- "Country"
kable(LocationR3)
View(FR3)
PlaceR <- setDT(FR3)[, lapply(.SD, sum), by = .(association), .SDcols = c("Wins", "Loss", "Draw")]
PlaceR <- setDT(FR3)[, lapply(.SD, sum), by = .(association), .SDcols = c("Wins", "Loss", "Draw")]
PlaceR$Win_Loss_Ratio <- PlaceR$Wins/PlaceR$Loss
PlaceR$Total <- PlaceR$Wins + PlaceR$Loss + PlaceR$Draw
PlaceR2 <- subset(PlaceR,  Total >= 10)
PlaceR2 <- PlaceR2[order(-PlaceR2$Win_Loss_Ratio),]
PlaceR2 <- PlaceR2[1:10,]
kable(PlaceR2)
PlaceR <- setDT(FR3)[, lapply(.SD, sum), by = .(association), .SDcols = c("Wins", "Loss", "Draw")]
PlaceR$Win_Loss_Ratio <- PlaceR$Wins/PlaceR$Loss
PlaceR$Total <- PlaceR$Wins + PlaceR$Loss + PlaceR$Draw
PlaceR2 <- subset(PlaceR,  Total >= 5)
PlaceR2 <- PlaceR2[order(-PlaceR2$Win_Loss_Ratio),]
PlaceR2 <- PlaceR2[1:10,]
kable(PlaceR2)
PlaceR <- setDT(FR3)[, lapply(.SD, sum), by = .(association), .SDcols = c("Wins", "Loss", "Draw")]
PlaceR$Win_Loss_Ratio <- PlaceR$Wins/PlaceR$Loss
PlaceR$Total <- PlaceR$Wins + PlaceR$Loss + PlaceR$Draw
PlaceR2 <- subset(PlaceR,  Total >= 10)
PlaceR2 <- PlaceR2[order(-PlaceR2$Win_Loss_Ratio),]
PlaceR2 <- PlaceR2[1:10,]
kable(PlaceR2)
